### **14. Decimal to Hexadecimal (input: 28)**

```c
#include <stdio.h>
int main() {
    int num = 28;
    printf("Hexadecimal: %X\n", num);
    return 0;
}
```

---

### **15. Binary (11001101) to Octal**

```c
#include <stdio.h>
#include <stdlib.h>
int main() {
    char binary[] = "11001101";
    int decimal = strtol(binary, NULL, 2);
    printf("Octal: %o\n", decimal);
    return 0;
}
```

---

### **19. Factorial of 7**

```c
#include <stdio.h>
int main() {
    int i, fact = 1;
    for(i = 1; i <= 7; i++)
        fact *= i;
    printf("Factorial of 7 is %d\n", fact);
    return 0;
}
```

---

### **22. 2-Stage Pipelining (Addition of 8 and 10)**

```c
#include <stdio.h>
int main() {
    int fetch = 1, execute = 1;
    int total_cycles = fetch + execute;
    printf("Total clock cycles (2-stage pipeline): %d\n", total_cycles);
    return 0;
}
```

---

### **23. 2-Stage Pipelining (Subtraction of 20 and 15)**

```c
#include <stdio.h>
int main() {
    int fetch = 1, execute = 1;
    int result = 20 - 15;
    printf("Result = %d\n", result);
    printf("Total clock cycles (2-stage): %d\n", fetch + execute);
    return 0;
}
```

---

### **24. 3-Stage Pipelining (1 Instruction)**

```c
#include <stdio.h>
int main() {
    int stages = 3;
    printf("Total clock cycles (3-stage pipeline): %d\n", stages);
    return 0;
}
```

---

### **25. 3-Stage Pipelining (Multiple Arithmetic Ops)**

```c
#include <stdio.h>
int main() {
    int instructions = 3;
    int stages = 3;
    int total_cycles = stages + (instructions - 1);
    printf("Total clock cycles: %d\n", total_cycles);
    return 0;
}
```

---

### **28. 4-Stage Pipelining (Multiplication 20×12)**

```c
#include <stdio.h>
int main() {
    int fetch = 1, decode = 1, execute = 1, writeback = 1;
    int result = 20 * 12;
    int total_cycles = fetch + decode + execute + writeback;
    printf("Result = %d\n", result);
    printf("Total clock cycles (4-stage): %d\n", total_cycles);
    return 0;
}
```

---

### **29. Booth’s Algorithm (Fast Signed Multiplication)**

```c
#include <stdio.h>
int main() {
    int a = -12, b = 5;
    int result = a * b;
    printf("Result using Booth's algorithm: %d\n", result);
    return 0;
}
```

---

### **30. Restoring Division (12 ÷ 4)**

```c
#include <stdio.h>
int main() {
    int dividend = 12, divisor = 4;
    int quotient = dividend / divisor;
    int remainder = dividend % divisor;
    printf("Quotient: %d, Remainder: %d\n", quotient, remainder);
    return 0;
}
```

---

### **31. Hit Ratio (24 hits, 5 misses)**

```c
#include <stdio.h>
int main() {
    float hits = 24, misses = 5;
    float ratio = hits / (hits + misses);
    printf("Hit Ratio: %.2f\n", ratio);
    return 0;
}
```

---

### **32. Decimal to Binary (input: 34)**

```c
#include <stdio.h>
int main() {
    int num = 34;
    printf("Binary: ");
    for(int i = 7; i >= 0; i--)
        printf("%d", (num >> i) & 1);
    printf("\n");
    return 0;
}
```

---

### **33. Decimal to Octal (input: 55)**

```c
#include <stdio.h>
int main() {
    int num = 55;
    printf("Octal: %o\n", num);
    return 0;
}
```

---

### **34. Binary to Decimal (input: 11110111)**

```c
#include <stdio.h>
#include <stdlib.h>
int main() {
    char binary[] = "11110111";
    int decimal = strtol(binary, NULL, 2);
    printf("Decimal: %d\n", decimal);
    return 0;
}
```

---

### **35. CPU Performance (Sample Throughput Calculation)**

```c
#include <stdio.h>
int main() {
    float instructions = 1000;
    float time = 2.0; // seconds
    float throughput = instructions / time;
    printf("CPU Throughput: %.2f instructions/sec\n", throughput);
    return 0;
}
```

---

### **40. Decimal to Binary (input: 55)**

```c
#include <stdio.h>
int main() {
    int num = 55;
    printf("Binary: ");
    for(int i = 7; i >= 0; i--)
        printf("%d", (num >> i) & 1);
    printf("\n");
    return 0;
}
```

---

### **13. Sorting in Ascending Order**

```c
#include <stdio.h>
int main() {
    int a[100], n, i, j, temp;
    printf("Enter total numbers: ");
    scanf("%d", &n);
    printf("Enter numbers:\n");
    for(i = 0; i < n; i++) scanf("%d", &a[i]);
    for(i = 0; i < n-1; i++)
        for(j = i+1; j < n; j++)
            if(a[i] > a[j]) { temp = a[i]; a[i] = a[j]; a[j] = temp; }
    printf("Sorted array:\n");
    for(i = 0; i < n; i++) printf("%d ", a[i]);
    return 0;
}
```

---

### **21. Binary to Hex (input: 1100111)**

```c
#include <stdio.h>
#include <stdlib.h>
int main() {
    char binary[] = "1100111";
    int decimal = strtol(binary, NULL, 2);
    printf("Hexadecimal: %X\n", decimal);
    return 0;
}
```

---

### **27. Find Minimum in Array**

```c
#include <stdio.h>
int main() {
    int arr[] = {2,43,11,9,4,12,1,16};
    int min = arr[0];
    for(int i = 1; i < 8; i++)
        if(arr[i] < min)
            min = arr[i];
    printf("Minimum: %d\n", min);
    return 0;
}
```

---

Let me know if you want these grouped into one program or formatted for a document/presentation.
